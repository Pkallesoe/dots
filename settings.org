* Use-package
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
(require 'diminish)
(require 'bind-key)

#+END_SRC
* use "swiper" for search
* Theme
  #+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
  :ensure t)
  (load-theme 'zenburn t)
  #+END_SRC
* Global Settings
#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
#+END_SRC
* Turn off menu bar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC
* Line
** Hide minor modes in the mode line
#+BEGIN_SRC emacs-lisp
(setq rm-blacklist ".*")
#+END_SRC
** Display battery
#+BEGIN_SRC emacs-lisp
(display-battery-mode 1)
#+END_SRC
** Display Time
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
(setq display-time-string-forms
       '((propertize (concat " " 24-hours ":" minutes " "))))
#+END_SRC
* Open URLs with xdg-open
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-xdg-open)
#+END_SRC

* Ido-mode
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC
  
* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status))
#+END_SRC
* Org-mode
Activate org-columns with C-c C-x C-c while on a top-level heading,
which will allow you to view the time you've spent at the different levels
(you can exit the view by pressing q):
#+BEGIN_SRC emacs-lisp
;; Set default column view headings: Task Total-Time Time-Stamp
(setq org-columns-default-format "%50ITEM(Task) %10CLOCKSUM %16TIMESTAMP_IA")
#+END_SRC
#+BEGIN_SRC emacs-lisp
     (defun org-summary-todo (n-done n-not-done)
       "Switch entry to DONE when all subentries are done, to TODO otherwise."
       (let (org-log-done org-log-states)   ; turn off logging
         (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
	
     (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+END_SRC
* Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
   :ensure t
   :bind ("C-<f1>" . evil-mode))

(use-package evil-leader
      :commands (evil-leader-mode)
      :ensure evil-leader
      :demand evil-leader
      :init
      (global-evil-leader-mode)
      :config
      (progn
        (evil-leader/set-leader ",")
        ;; bindings from earlier
        )
;; keyboard shortcuts
        (evil-leader/set-key
          "a" 'ag-project
          "A" 'ag
          "b" 'ido-switch-buffer
          "c" 'mc/mark-next-like-this
          "C" 'mc/mark-all-like-this
          "e" 'er/expand-region
          "E" 'mc/edit-lines
          "f" 'ido-find-file
          "g" 'magit-status
          "i" 'idomenu
          "j" 'ace-jump-mode
          "k" 'kill-buffer
          "K" 'kill-this-buffer
          "o" 'occur
          "p" 'magit-find-file-completing-read
          "r" 'recentf-ido-find-file
          "s" 'ag-project
          "t" 'ansi-term
          "T" 'eshell
          "w" 'save-buffer
          "x" 'smex
      )
)

(use-package evil-escape
   :config (evil-escape-mode t)
   :config(setq-default evil-escape-key-sequence "jk"))
(evil-mode 1)

;; Easy navigation between windows.
     (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
     (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
     (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
     (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
#+END_SRC
;* Smex
#+BEGIN_SRC emacs_lisp
(use-package smex
   :ensure t)
#+END_SRC
* Multiple-cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
   :ensure t)

#+END_SRC

* Linum-relative
#+BEGIN_SRC emacs-lisp
(use-package linum-relative
   :ensure t)

  (global-linum-mode t)
  (linum-relative-mode t)
  (setq linum-relative-current-symbol "")
#+END_SRC

* Underline current line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
(set-face-attribute hl-line-face nil :underline t)
#+END_SRC
  
* yes or no -> y or n
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
